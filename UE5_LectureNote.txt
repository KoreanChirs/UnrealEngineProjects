언리얼 공부하는 법 -> unreal online learning , 언리얼 엔진 가이드 투어 영상 보기.

UNREAL ENGINE[러셀과 함께하는 시작해요 언리얼 영상제작.]

컴파일 할 때 제발 코드 변경한 거 저장 좀 하고 돌려라.

갑자기 막 깨졌다면서 언리얼 엔진 꺼지면 그냥 내가 코드 잘 못짰을 확률이 높음.

0. 기본 셋팅
- 세팅->플러그인->volumetrics클릭
- 마켓 플레이스에서 원하는 것 가져오는 방법 : 구매 후 라이브러리에서 다운.

1. 기본 기술들

- 시점 움직이기 : 마우스 오른쪽 클릭 + 방향키 .
- actor 수정하기 : 마우스 왼쪽 클릭 후(W-> 위치조정 E-> 각도조정 R-> 크기조정)
- 시뮬레이션 하는 법 : 시작버튼 클릭
- actor 복제 : 위치조정(W) 클릭 후 alt + 중앙의 동그라미 클릭 후에 드래그.
- 여러 actor들 다중 선택: shift + 왼쪽 클릭
- actor에 질감 입히기 : 콘텐츠 브라우저 -> startcontent-> props -> materials 고른 후, actor에 드래그 
- 피벗 위치 바꾸기 : (소스코드 자체를 바꾸는 것에 주의) -> 선택모드 -> 모델링모드 -> 피벗.
또는 alt + 마우스 중간 클릭 + 드래그 -> 오른쪽키 -> 피벗 오프셋으로 설정.
- asset에 시점 맞추기 : asset f + 왼쪽클릭
- 아웃라이너 창에서 다중선택: shift 누르고 두개 누르면 그 사이의 asset들이 선택됌
- 특정 asset의 material 수정하는법: 아웃라이너의 머테리얼에서 머테리얼 사진 더블클릭 -> albedo의 albedo controls, tint 등에서 변경하기
- 캐릭터랑 충돌 안하는 asset 해결법: 아웃라이너의 스태틱 메시 사진 더블클릭 -> 콜리전 -> 자동 컨벡스 콜리전 -> 적용 
- collision 범위 이상할때 해결법 : 스태틱 매시 -> 디테일 -> 콜리전 복잡도를 default -> 4번째꺼로 설정 
- 나나이트 활성화: 웬만한 asset들은 나나이트 활성화 하되, 식물들은 나나이트 활성화 하면 안됌.(콘텐츠 브라우저에서 asset 클릭 후 오른쪽 클릭하면 나나이트 활성화 버튼 나옴.)
- 식물 바람에 날리게 하는 법: 엘리먼트 -> wind 옆에 두 버튼 on
- asset이 충돌에 위치를 바꿀 수 있도록 하는 법: 아웃라이너의 디테일에서 simulate physics 클릭. (단, collision을 자동 컨벡스 콜리전으로 해야 함. 아니면 렉 디짐.)
- asset옮기면서 화면같이 움직이기 :  shift누르면서 asset 움직이기.
- ctrl + n 눌러놓으면  n 눌렀을 때 그 시야로 돌아감.
- 엑터 변형하는 법: 모델링 모드 -> 모델링 툴바에서 선택.  pincut이 자르는 건데 좀 유용함. 
- 엑터끼리 묶는 법: 다중선택 하고 // 모델링 모드 -> mshmrg 해서 묶기  or 오른쪽 키-> 레벨 -> packed level actor 생성(개별 엑터 편집하려면 편집 누르고 
편집 한 후에 item label 들어가서 묶여있는 인스턴스 클릭하고 변경사항 커밋 누르면 됌.) 




2. 캡쳐

- 고해상도 캡쳐 : 원근버튼 옆에 짝대기 3개 클릭 -> 고해상도 스크린샷.
- 캡쳐본 저장 장소: epic games launcher -> 라이브러리 -> 해당 프로젝트 파일->마우스 우클릭->폴더보기-> saved -> screenshots


3. 퀵셀 브리지에서 asset 가져오기. 

- asset 가져오기: 선택모드 오른쪽에 콘텐츠 가져오기 -> 퀵셀 브리지 -> 원하는거 다운로드 -> add 하면,  프로젝트 창의 콘텐츠 브라우저의 megascans에 저장됌.
- asset 가져오기: 퀵셀 브리지에서 바로 드래그해서 가져올 수 있음. 
- 퀵셀 브리지에서 다중선택 : 퀵셀 브리지에서도 다중선택 하고 싶으면 shift 누르고 하면 됌.
- collection의 의미 : 한 테마에 맞는 assets 모여서 정리되어있음.


4. 콘텐츠 브라우저

- asset들만을 보는 필터 적용:  콘텐츠 브라우저에 특정 폴더에있는 static assets만을 모아서 보는 방법 -> 폴더 클릭 ->짝대기 3개 클릭->스태틱 메시 클릭.
- 한 asset과 한 asset사이의 모든 asset 선택: shift 누르고 두 asset 클릭.
- 한 asset씩 선택: ctrl + 선택. 



5. 폴리지(집단 배치) 

- 다량배치 하는 법: 선택 모드 -> 폴리지 모드 -> asset 선택 -> 배치(페인트) // 지우기(shift + 드래그)
- TIP: 폴리지는 식물 말고 다른 것에도 이용될 수 있으며, 밀도를 에셋에 따라 변경해줘야함. 밀도를 변경할대는 폴리지 창에서 에셋들 선택해 놓으면 변경창이 이 뜸.
- 자연스러운 폴리지 배치: 최소,최대값 설정해주기.


6. 빛 관리

- 빛 초기 설정 : lightning folder에서 빛 없애고, 창-> 환경 라이트 믹서.{스카이 라이트 = 간접광(그림자질때도 보이긴 보이는거), 애트머스페릭 라이트->태양
스카이 애트머스피어 =  하늘}  sky light는 real time capture 켜주기.
- 빛 관련 asset들 관리 : 빛을 만들면 아웃라이너에서 lighthing floder로 바로바로 옮겨주기(오른쪽키 -> 다음으로 이동). 
- 시간 구현: 태양빛은 각도를 회전시킴으로써 시간대의 변화를 구현할 수 있음.
- 배경의 분위기 : 환경 라이트 믹서 -> 하이트 포그 생성
- 태양으로 배경 색깔 바꾸기 :  directional light 는 온도 설정 가능. 라이트컬러에서 색깔도 바꿀 수 있음. 소스각도는 태양의 크기 의미. 오른쪽에 <-버튼은 디폴트값으로 들어가는 것 의미.
- 구름 추가 : 구름 등 추가기능 쓰려면, 세팅->플러그인->volumetrics클릭
- 구름 생성: 환경라이트 믹서->볼류메트릭 클라우드 생성후 콘텐츠 브라우저의 세팅 클릭->플러그인 콘텐츠 표시 + 엔진 콘텐츠 표시
- 사용자 구름 생성: tool->blueprintlibraries->cloudcompositing->bluprints->generator먼저 배치하고, object다음에 배치하는데,object 하늘 높게 배치(위 아래로는 움직임 변화 없음.)
- 사용자 구름의 디테일한 조정: 구름클릭->머티리얼에서 폴더모양 눌러서 머티리얼 인스턴스 찾고->오른쪽 키 눌러서 머티리얼 인스턴스 생성->생성한 친구를
머티리얼에 넣고->더블클릭해서 편집하면 됌.(detail을 편집하면 크기가 바뀜)
- 내가 만든 작품의 마지막 색보정(사진 전체에 색보정을 한다고 생각하면 됌.):  엑터 배치-> postprocessvolume검색->lightning으로 폴더이동->
인스턴스 디테일에서 infinite extent클릭. (이래야 어떠한 시야에서도 색보정이 적용됌.), 그다음 컬러 그레이딩 등에서 조절하기. 
bloom의 강도->태양의 밝기를 조절할 수 있는듯.
chromatic aberration->약간 그라데이션 마냥 꿈꾸는 것 처럼 사진을 바꿀 수 있음.



7. 카메라 사용

- 카메라로 사진 찍는 법 : 액터 배치에 cine camera actor치고, 화면에 인스턴스 만든 다음에, 아웃라이너 창에서 오른쪽 키 누른 후, 파일럿 클릭해서 옮겨다니기. 
- 초점 뒤에만 맞추는 법: .cine camera actor 디테일에서 lens settings-> 최소 f값 0으로 하고, 크롬 세팅->현재 조리개 낮추면 가까운 곳은 흐리게, 먼 곳은 분명하게 나옴. 
- 수동초점 거리에서 스포이드 같은거 누르면 클릭한 부분만 초점 맞춰짐. 
- 카메라 복제하는 법: 아웃라이너 창에 cinecamera를 위한 폴더를 만들고, ctrl + d누르면 복제됌. 
- 불 또한 초점 흐리게 하는 법: 렌즈 초점 할 때, 초점 안맞춘 부분의 불이 초점이 맞춰줘있음. -> 초점 흐리게 하는 법-> 불 인스턴스의 엘리먼트들 전부 더블클릭한 후에 디테일에서  dof 검색한 
다음, before dof 로 바꾸면 됌.
- 카메라 너비,높이 정하기: 카메라 아웃라이너의 필름백에서 설정 가능, 숫자 설정 창에서 곱셈 연산 가능.(2.35:1이 영화)


8. 영상 만들기 

- 시퀀서 만드는 법: 선택 모드 3칸 옆에 영화처럼 생긴애 클릭-> 새 폴더 만든다음에 이름 지정하고 생성.
- 카메라 시퀀서로 끌고오기 : 아웃라이너에 있는 카메라 클릭->시퀀서의 트랙쪽으로 끌고오면 됌. 
- 시퀀서 창에서 파일럿 카메라 바꾸기: 트랙 부분의 카메라인스턴스 옆에 카메라 같이 생긴 것 클릭하면 됌.
- 카메라 컷창 : 최종 영상이 담긴 창
- 영상 재생 : 시퀀서 창에서 space bar 클릭하면 됌.
- 현재 화면에 보여지는 시점: 빨간색 bar. 트랙검색 옆에 주황색 숫자가 빨간색 숫자의 현재 시점.
- 새로운 카메라 장면을 카메라 컷에 추가: 카메라 컷에서 + 카메라 클릭한 후 추가하면됌.(빨간색 bar 기준으로 뒤에다 추가하니, 빨간색 bar 잘 맞춰둘 것.)
- 1초에 넘기는 사진 수 정하기: 자석 아이콘 옆에 fps 설정 -> fps와 편집 화면의 숫자를 보고 화면에서 1초가 어느정도인지 알 수 있음. 
- 영상 길이 지정하기: 시퀀서 창 오르쪽 밑에 숫자 바꾸면 됌.(영상의 길이와 영상 편집 가능 길이 설정란이 각각 있음, 빨간색 선 같은거 움직이면 영상길이임.)
- 시퀀서 창 안에서 확대하기 : ctrl + 마우스 롤.
- 영상 자르는 편집 쉽게 하는 법: 빨간색 bar를 자르고 싶은 곳 까지 미리 옮겨놓으면 자를 때 거기로 탁 달라붙어서 편함.
- 위치 변경하는 애니메이션 넣는 법: 애니메이션 넣을 카메라 선택(클릭), 애니메이션 넣을 시점 선택(빨간색 bar 이동시켜서 처음과 끝에 transform찍기.)
transform을 찍는 방법은 transform 옆에 xor 누르면 됌. transform 내의 위치를 수정하여 시작과 끝의 위치를 다르게 해놓으면
(위치 수정할 때는 무조건 빨간색 bar를 바꾸는 시점에 위치시켜 놓은 후에 해야함.), 자동으로 영상이 play 되면서 각 시점에서 
시작과 끝의 위치에 잘 안착하도록 연속적으로 움직임. 
- transform 위치 수정하는 법: 드래그해서 옮기면 됌.
- 주의할 점: 특정 카메라가 맡고 있는 구간에는 그 카메라의 하위 목록에 들어가서 transform을 구성해야 함.
- 화면 이동하는 속도 일정하게 조절하는 법: transform 전부 드래그 한 다음에 오른쪽 키 누르고 -> 키 보간을 선형으로 설정. 
- 화면 이동에 대한 s-t curve 보는 법: fps 옆에 있는 아이콘 클릭하고,  이동시키는 축을 시퀀서 창에서 클릭.
- 애니메이션 만들 때 원하는 화면 위치에 쉽게 위치시키는 방법: 파일럿 카메라로 화면을 움직인 다음에 transform누르면 해당 화면에서의 위치값이 저장됌.  
- 초점을 자연스럽게 변화시키는 법: transform과 비슷하게 하면 되는데, 수동 초점 거리 옆에 xor로 하면 됌. 
- 위치, 초점 등 바뀌는 속도 직접 제어 하는 법: 아까 s-t그래프 들어가서 그래프 변화시키고 싶은 부분 드래그 한 다음에 바로 오른쪽 키 누르고 자동,탄젠트 모시기
클릭한 다음에 이상한 bar 같은거 잡아댕기면서 조절하면 됌.
- 빛 각도 애니메이션: 아웃라이너의 directional light를 시퀀서로 끌고오고 트랙 -> 트랜스폼 클릭. 후 영상 편집 쪽의 transform줄에 대고 우클릭->프로퍼티->쿼터니언
보간 사용 클릭.
- 영상물 출력하기 : 왼쪽 위에 영화컷 슬라이스 처럼 생긴거 클릭-> 영상 포멧->avi선택, 출력 디렉토리->영상 저장될 폴더, 애니메이션의 웜업 프레임수 = 60,
워밍업 전 딜레이 = 1, 샷 워밍 업 전 딜레이 = 1로 셋팅.



9. 메모리 

- 메모리 아끼는 법: 에셋의 텍스쳐파일 들어가서 LOD 바이러스 값 높여주면 됌.
- 메모리 아낄 때 많은 텍스쳐파일 선택해서 한번에 해주는 법: 필터로 텍스쳐 파일만 거르고, 다중선택 후 오른쪽 키 -> 에셋 액션-> 프로퍼티 매트릭스를 통한~클릭.
-> 엑셀같이 나타남. -> 다중선택( shift 이용) -> 오른쪽에 디스플레이에서 levelofdetail 선택 -> LOD 바이러스 설정.
- 텍스처 메모리 경고 뜨면 해결법: ~로 CMD창 열어서 명령어 r.streaming.poolsize N(숫자) 입력. -> 자동으로 숫자만큼 텍스처 메모리 할당량을 늘려줌.
단위는 모르겠으나 강사는 4000이라고 함.


10. 작업 팁

- 작업하다보면 Scale감을 잊을 수 있다 : 사람을 배치해 놓는 것을 추천, 콘텐츠 브라우저->All -> 콘텐츠 -> characoers->mannequin_ue4->mannequins->meshes
- 작품 만들기 팁 -> 맵을 만들 때 처음부터 캐릭터가 어디에 위치해서 시작할지를 생각한 다음에 만들기.
- 바닥 복제하면 폴리지도 같이 복제됌.

11. 에러 

- video memery has been exhausted error일시적 해결: 세팅->엔진 퀄리티 세팅-> 조절.


[UE4 c++ 프로그래밍 입문=언리얼 프로그래밍 개요, 베르의 게임 개발 유튜브]

-> c++ 프로젝트 생성이 안되면, 언리얼 엔진 앱을 관리자 권한으로 실행하면 됌.
+ c++ project는 visual studio와 연동되어 실행되기 때문에 비쥬얼 스튜디오에서
여러 초기 설정들을 해줘야함. 

1강. 
- 콘텐츠 브라우저의 c++ 클래스 파일화면에서 오른쪽키 누르면 새 c++클래스 라는 
버튼이 나오는데 그거를 누르고, 상속할 거 골라서 만들면 비쥬얼 스튜디오에서 해당
클래스가 만들어짐. 해당 클래스에는 3가지 함수가 있는데, 여기서 알아야 할 것은 
Tick함수가 매 프레임마다 호출된다는 것.
- 함수가 언제 불려지는지는 간단한 코드를 통해 알아볼 수 있다. 함수 안에 
UE_LOG(LogTemp,Log,TEXT("")); 라고 치고, 저장하고, UE5로 돌아와서 오른 쪽 밑에 테트리시 같은거 클릭해서 빌드시키기.(진짜 제발 비쥬얼에서 빌드하지마 오류나 제발 제발 어?)
UE에서 내가 만든 엑터를 배치한 후에, 창->게임 개발자 툴->출력로그 클릭.

2강. 
- 1강에서 만든 엑터상속 인스턴스에 property를 추가하는 것. 헤더 파일에 생성자 밑에 
UPROPERTY(EditAnywhere,BlueprintReadWrite,Category = "Damage")
int32 TotalDamage;

EditAnywhere-> 언리얼 엔진 창에서 바로 수정 가능
BlueprintReadWrite-> 블루프린트 창에서 바로 수정 가능
Category-> 데미지라는 폴더 비슷한거 안에 넣어두겠다. 

3강
- virtual void PostInitProperties() -> 속성 값이초기화 될 때 호출되는 함수.
- virtual void PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent) override; -> 속성 값이 바뀔 때 호출되는 함수.

4강
- 블루프린트와 c++ 연동하기
- c++로 스페이스바가 눌러지면 엑터가 떠오르게 하는 걸 구현하고 싶음.
-> bool type의 spacebar에 따라서 엑터의 위치가 변할 수 있도록 하는 함수를 만들어놨음.(cpp)
함수를 블루프린트에서 찾아낼 수 있도록 UPROPERTY설정 잊지말기, @카테고리 없으면 못찾음.
-> 이렇게 만든 엑터를 콘텐츠 브라우저 창에서 우클릭하여, 블루프린트 기반 엑터로 만들고.
블루프린트 편집창으로 이동. 
- 컴포넌트 창에서 Sphere추가해서 공으로 보이게 하기. 그후, 스피어를 바로 위에 디폴트모시기 에다가 드래그 해서 공을 디폴트 컴포넌트로 만들어주기.
- 그 후 피직스 시뮬레이트 체크, 이벤트 그래프 패널로 이동.
- 거기서 알맞게 연결해 준 후(자세히 이해 불가.), 왼쪽 위의 컴파일 버튼과 저장버튼을 누르자.

5강(입력 받기)
- 언리얼 입력: 
입력이름(예: 점프)과 그 입력에 해당하는 키를 만들어줌. 
그 키가 눌러졌을때의 행동을 cpp에서 함수를 구현해서 구현함.
  
- 입력의 종류
액션 입력: 점프, 스킬 등등 1회성 
축 입력: 마우스로 시점 변경하는 것과 같은 연속적인 값. 

- 입력 받아서 그 입력에 따른 행동 매핑하는 법:
입력과 입력이름 매핑:  편집 -> 프로젝트 세팅 -> input(입력) -> 액션 매핑, 축 매핑 등에서 설정하기 -> 그냥 창 닫으면 됌.
입력과 행동 매핑 : 툴->새로운 cpp클래스 -> pawn(AI나 플레이어가 조작할 수 있는 오브젝트)상속 받기
-> 코딩하기. -> 블루프린트 생성하기. -> 게임모드에서 블루프린트 생성해서 디폴트 pawn을 우리가 만든 pawn으로 변경.
월드 세팅에서 게임모드를 우리가 만든 게임모드로 교체. 

[배운 것 정리]
1. 만들어진 엑터와 에셋들을 가상환경 내에 배치하고, 영상을 만드는 방법.
2. cpp과 블루프린트를 이용해서 나만의 엑터등을 만드는 방법(외형 만드는 법은 아니고, 점프 등 기능 만드는 법)

[Undemy 강의]

- 블루프린트 창 열기: 왼쪽 위에 트리같은거 클릭 -> 레벨 블루프린트 열기 
- 용어 : 
핀 : 블루프린트에서 선을 연결할 수 있는 부분
- 와이어는 if then 구문으로 해석하면 좋음. ex)만약 play 버튼이 눌려져 있으면, string을 출력해라.


[2]

-움직이고 회전할 수 있는 C++클래스 하나 만들고, 상속받아서 서로다른 스태틱 메시 입히기.

[2.12] - PhysicsSimulation

- physics simulator는 객체 하나하나마다 다르게 적용할 수 있음. 

[2.13] - Objects and References 

- 이벤트 그래프에서 오른쪽 클릭해서 엑터의 레퍼런스 생성 가능.
- 엑터의 레퍼런스 노드의 파란색 동그라미를 끌면 해당 엑터의 멤버함수 실행 가능. 
- 하얀색 핀은 어떤 함수의 실행 타이밍 여부를 결정하는 것이다. (활성화 / 비활성화)
- 함수가 활성화 될지 여부를 결정하는 타이밍은 왼쪽 화살표로 부터 받고, 활성화 되면 오른쪽으로 
활성화 신호를 내보낸다. (이 특징때문에 sequential 하게 노드를 연결하면 쭈루룩 실행 가능)
- 나머지 동그라미 핀들은 함수에 필요한 매개변수를 나타낸다.
- 실행 타이밍 핀(하얀색 핀)들이 없는 노드들은 그냥 적당한 타이밍에 잘 실행된다. 

[2.14] - Adding an impulse

- 스페이스 바의 pressed 는 꾹 누르고 있으면 여러번 활성화 안됌. 처음 누를 때 한번만 활성화됌. 
- 이벤트 그래프에서 노드 끌어서 함수 선택할 때, context sensitive 누르면 해당 노드의 멤버 함수만 뜸.
- static mesh의 add impulse함수에서 vel change 선택하면 질량 무시하고 입력된 만큼 그냥 속도냄.

[2.15] - Blueprint Classes and Instances

- 나만의 엑터 만들기: 기본 엑터 배치 후 클릭 -> 디테일 창에서 트리같은거 클릭 -> 새 서브클래스. 
- 이렇게 만든새 엑터는 클래스라고 보면 되고, 새 엑터를 뷰 포트에 넣는 것이 인스턴스를 만드는 것. 
- 편집을 클래스에서 하면 인스턴스 전체가 수정되고, 편집을 인스턴스에서 하면 해당 인스턴스만 수정됌. 

[2.16] - Spawning Actors

- 엑터 스폰시키기(게임 실행 중 엑터 만들기) : 블루프린트 이벤트 그래프에서 SpawnActor from class함수
만들고 스폰 시킬 class고르고, transform오른쪽 키 클릭해서 분할 하기. 

[2.18] - Pawns and Actor Location

- get player pawn 이라는 함수의 input인 player index는 multiple player gmae일 때만 의미가 있으므로
아니면 그냥 0으로 고정하면 됌. 이 함수는 pawn(플레이어의 실체)를 반환함. 

[2.19] - Control Rotation

- pawn 의get actor rotation은 회전을 반영하지 못함. pawn이 애초에 회전하지 않기 때문임.
- 대신 pawn에 붙어있는 카메라가 회전한다고 생각하면 되는데, 이 카메라 각도를 반환하는 함수는
 
[2.21] - Get Forward Vector

- actor의 시점(카메라) 벡터를 반환해주는 함수 : get actor forward vector 

[2.23] - Geometry Brushes

- 새 레벨 만드는 법 : 파일 -> 새 레벨.
- 새로운 지오메트리 만드는 법: 엑터 배치 -> 지오메트리
- 지오메트리는 스케일 건들지 말고 브러시 세팅을 건들 것.
- box 브러시 디테일에서 브러시타입을 subtractive로 바꾸면 그 박스가 있는 곳을 구멍 뚫음.  
- 만들었던 레벨 블루프린트 계속 없어질 때: 만들어놓은거 찾아서 복사 + 현재 레벨에 붙여넣기 하면 됌.

[2.24] - Materials and Lightning

- 지오메트리도 머테리얼 입힐 수 있음.

[2.25] - Actor Components

- 엑터끼리 붙이는법 : parent 엑터와 child 엑터의 관계로 붙일 수 있음. parent 엑터의 디테일 창에 들어가서
스태틱 메시에다가 붙이고 싶은 child 엑터 드래그해서 놓기. 

[2.26] - Collision Meshes

- 엑터 위에 엑터 안쌓일때(with simulation physics) : 콜리전이 너무 복잡해서 생기는 문제일 것.
콜리전 수정해주면 됌. 영상에서는 콜리전 창에서 바로 z모시기로 수정.
- 있는 에셋 복제해서 나만의 에셋 만드는 법 : 에셋 클릭하고 디테일에서 트리같은거 클릭해서
 블루프린트 만들기 하면 됌.
- 아닠ㅋㅋㅋㅋ 활성화 핀 왜 선 2개 나가는거 안돼냐 ㅠㅠ.
- 나만의 변수 만드는 법: 레벨 블루프린트 창에서 왼쪽 내 불루프린트 창에서 변수 생성하면 됌. 

[2.28] - Booleans and Branches

- 블루프린트에서 if문 == branch 
- 비교해서 트루/펄스 내보내는 것 ->greater,less...etc

[2.29] - Functions

- 블루프린트에서 여러 노드들 합쳐서 function 만들 수 있음.-> 노드 다중선택 후 우클릭.
 
[2.30] - Return Types

- 나만의 함수 만들 수 있음 -> 함수+ 버튼 누르면 됌. 함수의 input과 output 은 오른쪽 디테일 창에서 만들 수 있음.

[2.31] - Pure Functions

- pure function : 프로그램의 환경에 영향을 미치지 않는 함수. ex) get, comparison등의 함수들.
- 이러한 함수들은 다른 함수들의 input으로 사용될 것이고, 굳이 활성화 핀을 달지 않아도 됌.
- 함수 노드를 클릭하고 디테일에서 퓨어 체크하면 됌. 
- 이런 함수는 함수명에 ? 쓸 수 있음. 

[2.32] - Member Functions

- 특정 객체에 속해있는 멤버함수 만들기
- 객체 더블 클릭 -> 위에 풀 블루프린트 에디터 열기 -> 함수 만들어서 쓰기. 
- self 매개변수 잘 사용해 쓰기. 
- 멤버함수에서는 글로벌 variable 접근 불가.
- 이벤트 그래프 외의 함수에서는 키 입력 받기 불가능.

[2.33] - Loading Levels & Delay Nodes

- 세상(레벨)의 인스턴스들 다시 로드하기 -> Load Level Instance(by Name)
- 현재 레벨 가져오기 -> get current level name
- 현재 레벨을 다시 로드하는 함수는 이번 버전에서 사라진듯 ㅠㅠ

[섹션 3]


[3.37] - Customizing The Character

- 어떤 사람을 시작 캐릭터로 설정하기 : 콘텐츠 브라우저에서 더블클릭 -> 디테일에서 auto possess player -> disabled 에서 수정하기.
- 마우스 시야 오른쪽 왼쪽으로 안들어가는거 : 블루프린트 가서 mouse input이랑 gamepad input 창의
axis turn모시기들 전부 right turn 모시기로 rate랑 아닌 것 맞춰서 교체하면 됌.
 

[3.38] - Compilers and Editors

- UE에서 컴파일러 계속 쓰는 거 : 코드를 BINARY로 변환하려고! 

[3.42] - Compiling a C++ Project

- 코드 에디터 변경하는 법: 편집 -> 에디터 개인설정 -> 소스코드
- 새로운 클래스 생성: 툴-> 새로운 cpp클래스. 
- VSCODE에서 빌드하는 법: 터미널-> Run build task -> [objectname]editor win64 Development Build 

[3.43] - UPROPERTY Variables

- 코드 수정하고 저장하고나서 컴파일 해야함!! 
- 오른쪽 밑에 테트리스 버튼 눌러서 컴파일 하는거는 영구적인 컴파일이 아님! 
- 영구적으로 컴파일 하고 싶으면 비쥬얼 스튜디오 코드에서 하기를! 
-> 그냥 저장하고 언리얼 엔진 끈 후에 비쥬얼 스튜디오 코드에서 컴파일 하면 됌.
-> 비쥬얼 스튜디오 코드에서 컴파일 안하면 언리얼 엔진 재시작 할때 제일 최근 비쥬얼 스튜디오코드 컴파일 기준으로 
되돌아감. 

[3.45] - C++ Files & BeginPlay

- BeginPlay함수는 언리얼 엔진에서 시작버튼 누르면 바로 실행되는 함수임.  
- **플레이 버튼 누르기 전에 변수 바꾸고 하는거(변수의 default value를 수정하는 것)는 인스턴스에 언리얼 엔진 한번 켜있는 동안 + 언리얼 엔진 재시작 하기 전까지 영구적으로 영향을 주는 것이고,
(아예 영구적으로 영향 주고싶으면 저장+ 끄고 + VSCODE에서 컴파일.)
플레이 버튼 누른 후에 변수 바뀌는 것은 일시적임. 플레이 끝나면 초기화됌(플레이 한번 끝나면 모든 변수는 default value로 초기화됌). **
- 게임 환경을 바꿀 수 있는 것 -> 코딩 + 디테일 창에서 변수 수정하는 것. -> 이 게임 환경이 바꾸고 저장하는 것은 
일시적 : 라이브 코딩 컴파일 (한번 켜있는 동안 쭉 바꿀 수 있음. + 언리얼 엔진을 "재시작"하기 전까지 유효함.)
영구적 : VSCODE컴파일 (일시적 저장이 된 후에 언리얼 엔진을 꺼놓고 재시작하기 전 상태에서 컴파일 하면 됌.) -> 그냥 디테일 창에서 변수값 바꾼 거 저장할 때도 VS CODE컴파일 해야함.  

[3.46] - Using Structs In C++

- 언리얼 엔진에서 x,y,z 세개의 변수를 가지고 있는 타입은 FVector라는 타입임. 
- 언리얼 엔진에서는 UPROPERTY없이 변수선언이 불가함. 
- FVector에서 각각의 x,y,z 변수 뽑아내는 법 -> FVector.X 형태로 하면 됌. 

[3.47] - Calling Functions in C++

- 엑터에 모양 입히는 법: 디테일 창-> 추가 -> 스피어 등등...(모양 = static mesh가 있어야 위치를 정의할 수 있음.)
- 시뮬레이션 하는 도중에 시작 키 옆에 위로 솓구친 화살표 누르면 시뮬레이션 중에도 F눌러서 움직이고 그런거 가능!
- 디테일 창에서 벡터 copy & paste 가능! 

[3.52] - Velocity & DeltaTime

- **Location을 옮길 때, 속도 * DeltaTime을 써서 옮기는 이유: 컴퓨터마다 프레임이 달라서, 만약 한 프레임당 위치 더해주는 것으로 하면,
,컴퓨터마다 1초에 옮겨지는 정도가 다를 것. 따라서 1초마다 옮겨지는 양을 같게 하기 위해서 속도를 씀. **


[3.53] - Scope Resolution Operator

- FVector::Dist는 두 벡터 사이의 거리를 구해줌. 
- UPROPERTY의 매개변수 VisibleAnywhere은 어디서든 볼 수 있는변수를 뜻함.

[3.55] - Using Member Functions

- 만약 1000보다 클때 반대로 가라, 그리고 1000보다 클 때 starting point를 현재 위치로 옮겨주면,
물체가 진폭이 1000보다 작은 진동운동을 함. -> 해결법 : starting point를 starting point + 1000
or starting point - 1000으로 초기화해 줌.
- [Vectorname].GetSafeNormal() = NormalVector 구해줌. 

[3.56] - Blueprint Child Classes

- 블루프린트 자손 클래스 만들었을 때, 스태틱 메시가 없으면 해당 엑터의 위치를 정의할 수 없음.
따라서 그 클래스 편집창에서 스태틱메시를 넣어줘야 함.
- 자손클래스를 만드는 이유 -> 다른 스태틱 메시를 입혀주기 위해서!! 라고 할 수 있을 듯.
- **자손 클래스에서 스태틱 메시 입혀줄 때, 여러 스테틱 메시를 편집창에 띄워서 합쳐줄 수 있음!**  

[3.57] - Forcing Character Coliisions

- 새로만든 클래스의 변수 값 바꾸는 방법: 블루프린트 편집 창 -> 클래스 디폴트 클릭. 
- 뭔가 엑터랑 캐릭터랑 부딫힐 때 렉 또는 화면 깨짐 현상 나타나면 -> 캐릭터 블루프린터 에디터 열기
-> **왠지 진짜 모르겠으나, MoveUpdatedComponent 함수 2개 써서 직렬로 잇고, 하나는 x,y = 1, 하나는 x,y = -1
하면 스무스하게 부딫침. 신기.**(대충 매 프레임마다 캐릭터가 어떤 엑터와 collision이 있으면 움직이라는 말 같음.)
-> 위에 MoveUpdatedComponent 함수 쓰면 캐릭터가 안돌게 되는데, 이를 해결하기 위해서는 get actor rotation함수를 써서
MoveUpdatedComponent 함수의 New Rotation에 연결하면 됌.


[3.58] - GameMode

- 오른쪽 키 누르고 맨 밑에 여기에서 플레이 누르면 거기서 캐릭터가 스폰되면서 플레이하는 방법:
왼쪽 위에 트리같은거 클릭-> 게임모드: 생성 클릭 -> 생성 -> Gamemode base -> 디테일 창에서 디폴트 폰 클래스 원하는 캐릭터로 바꾸기
-> 다시 트리같은거 클릭해서 원래 게임모드 ->None으로 클릭.  -> 이제 오른쪽키누르고 여기에서 플레이 누르면 거기에서 플레이 됌.


[3.59] - Writing To The Output Log

- 콘솔창에 정보 띄우기: UE_LOG(LogTemp, Display, TEXT("My Test : %f"),MyVar);
Display 대신 Error, Warning 등의 메세지를 띄울 수 있음. 

[3.60]  - FString

- 엑터 이름 같은거 GetName()해서 콘솔창에 띄우고 싶을 때
-> Fstring Name = GetName()
UE_LOG(LogTemp, Display, TEXT("My string : %s"), *Name) **역참조 연산자 넣어야함!!!!!**

[3.64] - FRotator

- Rotation값 얻는 법: GetActorRotation()
- 새로운 Rotation값 지정할 때 주의할 점: 매 프레임마다 특정 값 더해서 SetActorRotation()쓰면
360도 넘어가면 문제생길 수 있음. 
따라서 AddActorLocalRotation()쓰기를 바람.

[3.65] - 걸을 수 있는 바닥 각도

- 캐릭터가 계단 못올라 갈 때: 캐릭터 디테일 창에서 걸을 수 있는 바닥 각도 올려주기!


[4.68] - Project Setup

- 새 레벨 만드는 법: 파일 -> 새 레벨, 파일 -> 현재 레벨 저장.
- 새 레벨을 default level로 저장하는 법 : 오른쪽 위 세팅 -> 프로젝트 세팅 -> 맵&모드 ->defalut map 설정.

[4.69] - Modular Level Design

- 빛이 없어서 잘 안보일때 에셋들 보는 법: 왼쪽 위에 라이팅 포함 -> 언릿으로. 
- 에셋들 길이 재는 법: 오른쪽 위에 창4개로 바꾸는거 클릭 -> 마우스 중간(휠) 클릭해서 드래그 하면 됌.

[4.70] - Modualr Level Layout

- 빛이 없을 때는 창 4개로 해서 디자인 하는 것도 좋음.
- 위에서 바라보면서 디자인 함으로써 복제하기도 편함. 
- 오른쪽 위에 >>누르고 그리드 스냅 세팅 눌러서 커서 움직이는 정도 바꿀 수 있음.
- 아웃라이너에서 폴더 옆에 눈 클릭하면 해당 폴더에 속한 에셋들을 보고 안보고 할 수 있음.
- 에셋 높이 맞춰서 넣을 때 창 4개인데 진짜 엄청 유리함. 

[4.71] - Solution: Modualr Level Layout

- 만약 어떤 에셋이 서로다른 스태틱 메시들이 합쳐서 만들어진거라면, 하나하나의 스태틱 메시의 각도를 조정할 수 있다.
- 창 4개일때 드래그 해서 에셋 선택할 수 있음. (아웃라이너에 폴더 만들 때 유리)

[4.72] - Light Types

- 실내만 어둡게 하고 싶으면 : Sky_Sphere하고 SkyLight만 넣으면 됌. (SkyLight 에서 씬 리캡처 누르면 됌.)

[4.73] - Lumen & Light Bleed

- 뭔가 빛이랑 같이 나온 기술인 루멘이라는 기술이 있는데, 그것이 material의 픽셀 뎁스 오프셋을 지원해주지 않음.
-> 머테리얼 블루프린트 편집 창 가서 픽셀 뎁스 오프셋 끊어주면 material이 정상적으로 보임.
- directinal light가 분명 천장 있는데도 뚫고 들어오는 것은 스태틱 메시가 한쪽으로만 구현이 되어있어서 그럼.

[4.74] - Level Lighting

- torch 디테일 창 안에 torch_PointLight 들어가면 빛의 세기 조절가능!
- chandalier는 add light하면 빛 추가할 수 있음! 

[4.75] - Character Blueprint

- 콜리전 할때 편집하고 적용 누르면 안됌!!! 
- 콜리전 보고싶으면 표시 -> 콜리전 클릭해야함.

[4.77] - C++ Actor Component

- component(has a relation) 구현법 : 예를 들어 Light를 움직이게 하고 싶다면 어떻게 해야하는가?
- 원하는 에셋 클릭 -> 디테일 -> 추가 -> 새 C++컴포넌트 -> Actor component -> 만들고 나서 -> 다시 추가 -> 아까 이름 검색.
- 질문 -> 그냥 예전꺼 상속 한다음에 빛 넣으면 되는거 아님? -> 상속해서 스태틱 메시 입혀줄 때, 스태틱 메시는 기능이 없는 겉의 모양임. 
만약 그런식으로 입혀주면 빛 내는거 구현 불가.(전등 모양인 움직이는 엑터만 만드는 것임.) 


[4.78] - Pointer Types & GetOwner()

- actor의 이름 출력하는 법 : this->GetActorNameOrLabel()
- FVector를 FString으로 변환해주는 함수 = ToCompactString();

[4.79] - Dereferencing & Arrow (->) Operator
- 현재 위치와 타켓위치, 이동속도, 이동시간을 알려주면 나중 위치를 반환해주는 함수(타켓위치가 존재하는 이유는 그저 이동방향 알려주려고)) : 
FMath::VInterpConstantTo(CurrentLocation, TargetLocation, DeltaTime, speed)
- 위에거를 쓰는 이유: 속도의 크기와 방향을 알고있을 때, 속도 벡터를 찾을 수도 있지만 그냥 그것보다 함수 하나 쓰자.  
- 어떤 에셋 이동시키고 싶으면 : 디테일에 스태틱메시 가서 모빌리티 -> 무버블.
- EditAnywhere해서 디테일 창에서 바꾸는거 게임 실행중에도 수정할 수 있다. 

[4.80] - Linkers, Headers and Includes

- 스태틱 메시 합치는 방법: 하나의 디테일 창의 스태틱 메시에다가 다른 스태틱 메시 드래그.
- Scene 속성(카메라 등)에는  Scene componen를 붙일 수 있다.(블루프린트 편집창에서 추가 -> 검색해서 추가)


[4.83] - Line Tracing & Sweeping

- Tracing 기법: 시작점과 도착점 사이에 빔(점 = Line 기법 or 공 = Sweeping 기법 등등)을 쏴서 그 사이에 걸리는(교점이 있는) 물체를 탐지하는 UE5의 기능
- Tracing을 할 때에 특정 엑터만 Tracing할 수 있다. 
- 하는법 : 세팅 -> 프로젝트 세팅 -> 엔진 -> 콜리전 -> 새 Trace channel  
그리고 나서 특정 엑터의 디테일 -> 콜리전 프리셋 = custom 으로 하면 새 채널이 보임.
- grabber채널을 기본 ignore로 해두고 statue 특성에서만 블록으로 해두면 grabber 채널에서는 statue만 탐지할 것.

[4.84] - GetWorld()

- 게임 시간 아는 법: UWorld* World = GetWorld(); float Time = World->TimeSeconds;


[4.85] - DrawDebugLine()

- 컴포넌트의 위치 반환 = GetComponentLocation()
- 앞 시야 단위벡터 반환 = GetForwardVector()
- 라인 그려주는 함수 : DrawDebugLine(GetWorld(), Start, End, FColor::Red);
- 위 함수 쓰고 나서 게임 실행시킨 다음에 게임 안으로 들어가지 말고 f8 눌러서 게임 밖에서 봐야 선 보임.

[4.87] - Const References & Out Parameters

- c++에서 여러개 리턴하고 싶을 때 꼼수 : outparameter개념을 쓰자. 레퍼런스 이용해서 input에다가 일종의 ouput으로 쓸 
parameter를 넘기면 됌.

[4.88] - Geometry Sweeping

-GetWorld()->SweepSingleByChannel(HitResult, Start, End, FQuat::Identity, ECC_GameTraceChannel2 ,FCollisionShape::MakeSphere(GrabRadius));
여기서  ECC_GameTraceChannel2 따는 법: config -> engine.ini 파일 가서 내가 원하는 채널 이름 가지고 와야함.(grabber)) 
HitResult는 일종의 output임. FQut::Identitiy는 회전이 없다는 뜻.

- 채널을 넣어주는 이유: 위에서 특정 엑터만 감지할 수 있도록 채널 설정을 해주었기 때문. 특정 엑터만 감지하려고.

 
[4.89] - Input Action Mappings


-input name설정 : 세팅-> 프로젝트 세팅 -> 엔진 -> 입력 -> 액션 매핑(Discrete한 경우에)

[4.90] - Blueprint Callable

-release함수 만들고 grabber에 연결해주는 이유는 grabber가 갖고 있는 기능이라는 것 표시하려는 듯.

[4.91] - FindComponentByClass() & nullptr

- 물체 잡게 만드는 법 : 캐릭터 블루프린트 편집 창에서 컴포넌트에 physics handle 추가.
- DrawDebugSphere(GetWorld(),HitResult.ImpactPoint,10,10,FColor::Red, false,5);
HitResult.ImpactPoint = sweep 하다가 충돌한 곳.(이걸 쓰자.)
HitResult.Locaiton = sweep 하다가 충돌했을때 구의 중심위치.

[4.93] - Grabbing With Physics Handle

- 잡았을 때 위치와 회전 정보 넘기기(PhysicsHandle안에 저장되는 느낌.): PhysicsHandle->GrabComponentAtLocationWithRotation(HitResult.GetComponent(),NAME_None,HitResult.ImpactPoint,HitResult.GetComponent()->GetComponentRotation());
- 그놈 위치 설정 : PhysicsHandle->SetTargetLocationAndRotation(TargetLocation, GetComponentRotation()); (타케 없으면 코드 알아서 안돌아가나봐)

잠시 정리: 잡는 법 -> 콜리전 설정(SWEEP) -> Physics Handle 기능 사용하기.

[4.94] - Waking Physics Objects

- 잡은 애 검사 : PhysicsHandle->GetGrabbedComponent()
- 잡은 애 풀기 : PhysicsHandle->ReleaseComponent()


[4.96] - Overlap Events

- **만약 특정 두 물체가 collision하려면 두 물체에서 서로를 모두 Block으로 설정해야함.** 
- 오버랩 이벤트를 통해 어떤 물체 두개가 오버랩 하고 있는지 아닌지 알 수 있음. **이를 활성화 하려변 디테일 설정에서 둘 다 Generate Overlap체크해줘야함**.
- 문에다가 추가로 box component상속받은 c++ component 만들었을 때, UCLASS설정이랑 BeginPlay 함수 등 우리가 직접 설정해줘야함.
- 그 c++ component 이용해서 overlap 메세지 띄우기 -> 걔 클릭한 상태에서 오른쪽키 -> 이벤트추가->콜리전-> begin overlap.

[4.97] - Constructors

- 보통의 component들은 tick function이 off돼어있음. 이를 활성화하기 위해서는 PrimaryComponentTick.bCanEverTick = true;
 해줘야함. 

[4.98] - TArray

- TArray<AActor*> Actors;
	GetOverlappingActors(Actors); 할때 자기위에 속해있는 엑터도 범위 안에 들어오면 출력됌.

[4.101] - Actor Tags

- 특정 actor만 오버랩했을떄 검출하는 법: tag이용. 디테일->tag
- if(Actors[i]->ActorHasTag("Unlock1")){

[4.103] - Dependency Injection

- 서로 다른 component들 끼리 코드 협력하고 싶으면 블루프린트 편집창 내에서 함수 불러서 서로 코드에다가 
객체형태로 저장하면 됌.


4 정리: sweep 이용해서 sweep 된 엑터를 얻을 수 있었음. 그거를 이미 만들어진 grap기능을 이용해서 잡았음.
그리고 box component의 overlap이용해서(with tag) overlap되면 mover 활성화 되게 했음.  


[5]

[5.110] -  Pawn Class Creation

- actor가 월드에 넣을 수 있는 가장 기본.
- pawn은 거기에 우리가 control할 수 있는 것이 추가됌.
- charactor는 날기, 수영하기등의 기능 추가 돼있음.

[5.111] - Creating Components

- component에는 static mesh는 가질 수 없는 scene component(위치,붙이기 가능)와 거기에 추가로 collision만 있는  capsule component
가질 수 있는 static mesh component 등이 있음. 
- Pawn class는 기본적으로 root component로써 scene component를 가지고 있다.
- 어떤 class든(actor든 pawn이든..) component들을 가지고 있다. 
가장 기본으로 rootcomponent로써 scene component를 가지고 있고 추가적으로 그 root component에 붙여나가는 것이다. 
root component를 바꿀 수도 있다. 

[5.112] -  Forward Declaration

- 특정 File include할 때 cpp파일에 include하는게 좋다. 
우리는 보통 h파일을 include 하는데, h 파일을 h파일에 include해서 계속 쌓이면 안좋음. 
필요한 h파일만 cpp파일에 include해서 쓰자.  -> cpp파일에 쓰려고 h 파일에 선언해야할 때가 있는데 이때는 그냥 앞에 Class 붙여주면 됌.
UCapsuleComponent* CapsuleComp; -> class UCapsuleComponent* CapsuleComp; (포인터만 됌(메모리 크기가 포인터는 항상 똑같기 때문에).호호 이런거 처음 봄. 진짜 신기하다.)

[5.113] -  Constructing The Capsule

-CreateDefaultSubobject<UCapsuleComponent>(TEXT("Capsule Collider"))는 component 생성하고  포인터 리턴해줌.어디 붙이지는 않음.


[5.114] - Static Mesh Components

컴포넌트 만들어서 다른 컴포넌트에 붙이는 법 : BaseMesh->SetupAttachment(CapsuleComp);

[5.117] - Editing Exposed Variables

- 블루프린트 편집창에서 변수 띄우는 법: UPROPERTY(BlueprintReadWrite)

[5.118] - Exposing The Components

- private에 있는 변수 언리얼 에디터에서 띄우는 법 :  UPROPERTY(meta = (AllowPrivateAccess = "true"))
- component를 담고있는 변수를 UPROPERTY(VisibleAnywhere,BlueprintReadOnly,Category="Components")만 해줘도
디테일 창에서 해당 component를 편집할 수 있음.
- 우리가 [4]에서 mover component를 붙였던 거는 actor component였는데, 이거는 scene component 상속이 아니라서 어따 붙이고 할 수 없음.
신기한거는 actor component를 추가한 후에 걔를 움직이면 전체가 다 움직인다는거.

[5.119] - Creating Child C++ Classes

-spring arm : 카메라 컴포넌트랑 본체랑 이어주는 것.
-blueprint 상속 클래스 부모 바꾸는 법: 클래스 세팅->부모 클래스.

[5.120] - Possessing The Pawn

-우리가 만든 pawn을 플레이어로 설정하는 법: 디테일 -> auto possess player -> player 0

[5.121] - Handling Input

- 축 매핑 코드에서 하는 법 : PlayerInputComponent->BindAxis(TEXT("MoveForward"), this, &ATank::Move);
- 축 매핑하면 매 틱마다 해당 이름이랑 바인딩 된 함수가 불리고 파라미터로 0이 넘어감, 만약 키를 누르면 그 함수의 파라미터로 그 키의 스케일값이 넘어감.

 
[5.122] - Local Offset

- 화면 오른쪽 위에 지구본모양 클릭하면 local direction으로 바꿀 수 있음.
- 원래는 항상 world direction으로 xyz 움직이는 방향이 설정됐는데, local direction으로 바꾸면 엑터를 rotate 시켰을 때, 엑터의 xyz도 같이 돌아감.
- 그래서 특정 엑터를 조종하고 싶을때는 AddActorLocalOffset() 함수를 쓰자. (x축이 앞임.)


[5.123] - Movement Speed

-함수에서 DeltaTime 얻고 싶을 때: UGameplayStatics:GetWorldDeltaSeconds(this);
어떤 World의 델타타임인지 알기 위해서 그 월드에 속해있는 객체를 넘긴다고 생각하면 됌.

[5.124] - Local Rotation

-우리가 만든 capsule component 움직이면서 collision 활성화 시키려면 두가지 해야함.
1. collision 설정에서 모든 타입 block으로 설정.(디테일)
2. AddActorLocalOffset(Delta, true); 두번재 파라미터에 true 넣어주기(root component의 collision을 해주는 것).

[5.125] - Casting

- pawn의 운동은 PlayerController라는 애가 담당하고 있음.
이 playerController를 얻는 법: PlayerContollerRef = Cast<APlayerController>(GetController());(다운 캐스팅 한거임.)
- 신기: 분명 AController*를 APlayerController*로 바꾸는 것인데, <>안에는 포인터로 안씀. (Cast func 고유 특징인 듯.)

[5.126] - Using the Mouse Cursor

- 커서랑 콜리전(라인 트레이싱) 보는 법: PlayerControllerRef->GetHitResultUnderCursor(EcollisionChannel::ECC_Visibility, false, HitResult); 

[5.127] - Rotating the Turret

- 벡터가지고 그쪽방향 rotation 만드는 법 : 벡터.Rotation() 
FVector ToTarget = LookAtTarget - TurretMesh->GetComponentLocation();
FRotator LookAtRotation = ToTarget.Rotation(); 
- World의 방향을 설정할 것인지 Local 방향을 설정할 것인지 잘 생각해서 쓰기. 
- 콜리전 지원해주는 안보이는 것: 왼쪽 위 검색에서 blocking volume(라인트레이싱 채널 block돼있는지 확인하기)
- 천천히 원하는 곳 까지 움직일 수 있도록 해주는 방법 : TurretMesh->SetWorldRotation(FMath::RInterpTo(TurretMesh->GetComponentRotation(),LookAtRotation, UGameplayStatics::GetWorldDeltaSeconds(this),5.f));

[5.128] - The Tower Class

- 다른 클래스에서 지금 플레이하는 애의 객체를 갖고오고 싶을 때 : Tank = Cast<ATank>(UGameplayStatics::GetPlayerPawn(this, 0)); 

[5.129] - Fire

- 액션 매핑은 바인딩 된 함수가 버튼을 누를때 또는 뗄때 한번만 호출됌.

[5.130] - Timers

-특정 초마다 특정 함수 부르도록 하는법: GetWorldTimerManager().SetTimer(FireRateTimerHandle,this, &ATower::CheckFireCondition, FireRate, true);

[5.132] - Spawning The Projectile

-블루프린트 클래스를 c++로 끌고오는 법: 
1. 그 블루프린트 클래스는 c++ 클래스를 상속받았어야 한다. 
쓰고 싶은 곳.h에다가 이 코드 작성.-> TSubclassOf<class Aprojectile> ProjectileClass; 
2. 블루프린트 에디터 들어가서 ProjectileClass에 클래스 넣어준다. 
 
- 클래스 소환하는 법: 꺽새 안에는 상속한 c++클래스 이름을 괄호 안에는 소환할 실제 클래스 이름(1에서 정한 이름)을 넣는다.
 GetWorld()->SpawnActor<AProjectile>(ProjectileClass,ProjectileSpawnPoint->GetComponentLocation(),ProjectileSpawnPoint->GetComponentRotation()); 

[5.133] - Projectile Movement Component

- UProjectileMovementComponent 라는 built in class가 있는데, 그냥 그 component 붙여서 엑터 소환하면 speed 맞게 잘 소환됌. 

[5.134] - Hit Events

- Collision이 일어나면 특정 함수 부르도록 하는 법: ProjectileMesh->OnComponentHit.AddDynamic(this, &AProjectile::OnHit);
void AProjectile::OnHit(UPrimitiveComponent* HitComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse , const FHitResult & Hit){
	
- 위에 있는 파라미터들은 자동으로 넘겨줌. 

[5.135] - Health Component

- 엑터와 엑터 컴포넌트는 다른 것이다. 
- 뭔지는 잘 모르겠지만, 데미지를 특정 엑터가 받으면, 함수를 불리도록 하는 방법:
GetOwner()->OnTakeAnyDamage.AddDynamic(this, &UHealthComponent::DamageTaken);

[5.136] - Applying Damage

- 뭔지는 잘 모르겠지만 Owner를 설정할 수 있음. 

[지금까지 5 요약]


- 충돌나면 충돌이벤트 발생-> 함수 불러 -> 그 함수에서 데미지 이벤트 발생 함수를 불러 -> 데미지 받은 엑터의 연결된 함수를 불러.


[5.137] - The Game Mode Class

- GameMode 클래스는 GameModeBase 클래스의 자식클래스로서 조금 더 기능이 많음.
- 이 클래스들은 게임의 규칙 같은거 넣을 때 쓰임. 
- 게임모드는 프로젝트 세팅 -> 맵&모드에서 바꿀 수 있음.
- 디폴트 폰 클래스 설정해주면 그냥 게임 시작하면 그 클래스를 플레이어 스타트에 소환시켜줌.

[5.138] - Handling Pawn Death

- 엑터 숨기기: SetActorHiddenInGame(true); SetActorTickEnabled(false);
- 엑터 죽이기: Destroy();
- 플레이어 엑터 가져오기: Tank = UGameplayStatics::GetPlayerPawn(this,0);
- 엑터 숨긴다음에 할 일: 해당 엑터에게 인풋 바인딩 안되게 하고, 해당 엑터의 마우스 커서 안보이게 하기.
Tank->DisableInput(Tank->PlayerControllerRef);
Tank->PlayerControllerRef->bShowMouseCursor = false;

[아이디어 요약]

- 데미지 받은 actor의 healthcomponent에 있는 DamageTaken함수가 불린다. -> 게임모드의 actorDied 함수가 불린다 -> ActorDied에서 각 class의 HandleDestruction 함수가 불린다.

[5.139] - Custom Player Controller

- 게임모드에서 플레이어 컨트롤러 설정 가능.
- 몇초 후 게임 시작하는 법: 그 몇초동안 해당 엑터에게 인풋 안들어가게 하면 됌. + 그 몇초동안 마우스 커서 안보이게 하기. 

[5.141] - The Start Game Widget

- UFUNCTION(BlueprintImplementableEvent)를 이용하면 함수 implementation을 blueprint에서 할 수 있음.
- 이거는 뭐냐면 c++내에서 저 함수 부르면 블루프린트의 그 이벤트가 활성화 되는 것임. 
- 위젯 블루프린트 만드는법 : 오른쪽클릭-> 유저 인터페이스 -> 위젯 블루프린트 -> UserWidget 상속.
- 캔버스 패널을 먼저 놔두고, 텍스트를 그 위에 올리면 됌. 앵커를 설정하면서 화면위치내의 텍스트가 있어야 할 곳을 알 수 있음.
- 블루프린트에서 위젯 생성-> add to viewport 해서 위젯을 화면에 띄울 수 있음.

[5.142] - Countdown Timer

- 웨젯 블루프린트에서 오른쪽 위에 그래프 누르면 그래프로 할 수 있음.
- ceil함수 : 올림해주는 함수.
- Countdown idea: 숫자 - deltatime. 

[5.143] -  Displaying Countdown Time

- 텍스트 디테일에 변수 여부 체크하면 변수로 사용할 수 있음.

[5.150] - Camera Shake

- 사운드 이펙트나 카메라 흔들리는거나 전부 component로 넣고 (블루프린트 편집창에서 변수에 넣기.)함수 이용해서 이펙트 넣는 것임.

[5.151] - Polish And Wrap-Up

- spring arm의 lag를 true로 설정하면 거기에 연결된 카메라가 스무스하게 움직임. 
- 게임 출시 방법: 플랫폼->windows->project packaging


[Simple Shooter]


[6.154] - Pawns vs Characters in C++

- character는 pawn의 자식클래스로, 사람의 특성이 반영되어있음. 
- character의 default component로 있는 arrow component는 사람이 바라보는 방향을 알려줌.

[6.155] - Character Movement Functions

- AddMovementInput(GetActorForwardVector() * AxisValue) : 벡터대로 움직임. 
- AddControllerPitchInput(AxisValue) : 파라미터 크기만큼 위에보고 아래보고 함. 
- AddControllerYawInput(AxisValue) : 파라미터 크기만큼 오른쪽 보고 왼쪽보고 함.
- 오른쪽 보는 벡터 얻기 : GetActorRightVector()

 
[6.156] - Controller Aiming

- 게임패드로 플레이 해서 인풋 바인딩 하는 방법 이 렉쳐에 나와있음.

[6.157] - Third Person Camera Spring Arm

- spring arm은 카메라가 벽 안으로 안들어가게 해주는 기능도 있음.

[6.158] - Skeletal Animations 101

- 스태틱 메시 + 애니메이션 ->  스켈레톤 ///  스태틱 메시를 보면 여러 구성품들이 붙어져 있는데, 에니메이션은 그 구성품들을 프레임에 따라 움직이게 하는 것임. 
- 캐릭터의 에니메이션 설정하는 방법: 캐릭터의 스태틱 메시의 디테일 창 -> 에니메이션 모드를 asset으로 바꾸고, 플레이할 애님 설정하면 됌.
- 에니메이션 필터하는 법: 필터하는 곳에서 에니메이션 전체 클릭하면 안되고, 에니메이션 중 에니메이션 시퀀스 클릭. -> 하나 편집창 들어가면 오른쪽 밑에 에셋 브라우저에서 에니메이션 교체해가면서 볼 수 있음.

[6.159] - Editing Collision Meshes

- 특정 에셋의 스태틱메시를 콘텐츠 브라우저에서 찾고 싶으면, 디테일 창에서 스태틱 매시 옆에 검색버튼같은거 누르면 됌.
 

[6.160] - Animation Blueprints 101

- 복잡한 에니메이션 만들기:  콘텐츠 브라우저->우클릭->애니메이션->애니메이션 블루프린트 생성. 호환되는 스켈레톤 고르기.
- blend라는 기능을 쓰면 alpha값에 따라 서로다른 애니메이션을 보여줄 수 있음. (오른쪽 밑에 에셋 브라우저에서 골라쓰면 됌.)
- 더 복잡한 에니메이션 만들기: 콘텐츠 브라우저->우클릭->애니메이션->블렌드 스페이스.
- 블렌드 스페이스: 에셋 디테일에서 축 크기와 각 에니메이션 위치 조정 가능.

[6.162] - Connecting Animation To Gameplay

- 내가 만든 에니메이션 적용: 캐릭터 블루프린트 편집창->디테일->애니메이션 모드->블루프린트->밑에서 선택.
- 애니메이션 블루프린트에 있는 블루프린터 업데이트 에니메이션은 틱 함수랑 똑같음.

[현재까지의 아이디어 정리]

- 인풋 바인딩 해서 캐릭터 움직일 수 있게 했음.
- 캐릭터가 움직이는 것에 따라서 다른 애니메이션을 적용시켜야 함.
- 블렌드 스페이스를 이용해서 input값에 따라 다른 애니메이션이 적용될 수 있도록 함.(에니메이션 편집 창에서 import)
- 캐릭터가 움직이는 것에 따라서 input값을 설정해줌. 
- Speed의 경우 그냥 actor speed 받아왔고,
- angle의 경우 velocity와 forward vector의 사이각을 구해도 되지만, 그냥 velocity를 actor의 축을 기저로 한 값으로 변형시켜서 그거 자체를 쓰면 됌.


[6.164] - Calculating Animation Speeds

- 애니메이션 자체의 스피드 보는 법: 그냥 발 하나 잡고 한번 걸을때 거리/시간. (대략 조깅 320, 걷기 130정도였음.)
- 실제로 AddMovementInput(GetActorForwardVector() * AxisValue)했을 때 130~320 사이로 걷는 듯.


아이디어: 총을 소환 한 후, 캐릭터의 매쉬에다가 붙임.
[6.167] - Attaching To Meshes Via Sockets

- 매쉬 수정하는 법: 해당 매쉬랑 연결된 애니메이션 들어가서 -> 오른쪽 위에 스켈레톤 클릭-> 관절 찾아서 없애기(c++로).
- 캐릭터의 매쉬에다가 붙이는 법: 매쉬특정부분에 소캣 생성해서 그 소캣에 붙이면 됌.
Gun_->AttachToComponent(GetMesh(),FAttachmentTransformRules::KeepRelativeTransform, TEXT("WeaponSocket"));

[6.172] - Impact Effects

- 현재까지 총의 시야에서 나오는게 아니라, 카메라의 시야에서 나오는 것으로 모든 것을 하고 있음. 라인 트레이싱 등..

[에러 해결]

- 시야 위아래로도 돌아가게 하려면 슈터 블루프린트 편집창 가서 Use Controller Pitch Input -> True로 설정해줘야 함.

[6.176] - Blending Animations By Booleans

- 애니메이션 한번 하고 멈추는 방법(죽는 에니메이션 등): 애니메이션 블루프린트에서 에님그래프에서 해당 에니메이션 노드 디테일에서 loop를 false로 하면 됌.

[6.178] - Create and Setup an AI controller

- AI 쓰려면 AI Controller class만든 후에 character(pawn)의 디테일 창에서 연결시켜줘야 함.

[6.179] - AI Aiming

- 플레이어 자체가 플레이어를 보도록 하게 하는 것은(AI controller) 효과 없음!!

[6.180] - Nav Mesh And AI Movement

- AI가 특정 ACTOR 따라가도록 만드는 방법: MoveTo함수를 쓰면 되고, AI가 따라다닐 수 있는 길을 NavMesh를 이용해서 
특정해줘야 함. 
 
[6.183] - Setting Blackboard Keys In C++

- AIcontroller에 behaviortree가 연결되어있으면 그 behavior tree에 연결되어있는 블랙보드는 aicontroller의 component임.

[6.185] - BT Decorators And Selectors

- sequence오른쪽키 눌러서 decorator( blackboard )클릭하면 조건문 만들 수 있음.
- 컨디션에서 both를 누르면 if-elseif- else문 처럼 쓸 수 있음.

[6.186] - Custom BTTasks In C++

- BT_Task만들 때 링커 에러나면 build.cs파일 가서 PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "GameplayTasks" });
해주면 됌. 

[6.187] - Executing BTTasks

- 만약에 TASK에서 TICK 함수도 쓰려면 ExcuteTask함수에서 inprogress를 반환해야 함.
- **BT에서 조건 검사는 매 프레임 마다 함.**
- 상속할때 기본 파일 보고 붙여넣기 해. 왜 에러나는지 모르겠는데 붙여넣기 안하면 에러나.

[6.192] -  Setting Timers In C++

-함수 implementation하는 곳에서는 default value 써놓으면 안됌.

[6.193] - Displaying A Lose Screen

-위젯 INCLUDE 하려면 : PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "GameplayTasks", "UMG"});해야함.


[6.194] - Iterating Over Actors

- controller->gamehasended : 게임 끝내는 것. 누가 졌고 이겼는지를 알려주면, 죽고나서 시점이 이긴 엑터에게 고정됌.
for(AController* Controller : TActorRange<AController>(GetWorld())){
        bool bIsWinner = Controller->IsPlayerController() == bIsPlayerwinner;
        Controller->GameHasEnded(Controller->GetPawn(),bIsWinner);
    }

[6.198] - Randomized Sound Cues

- sound cue 이용하면 특정 상황에서 여러 사운드를 랜덤하게 소환할 수 있음. 

[6.199] - Sound Spatialization

- 거리에 따라 사운드 크기 조절하는 방법 배움: 사운드 큐의 왼쪽 창에 있는 어테뉴에이션을 설정하면 됌. 
- 이어폰 위치감각 설정하는 방법 배움. : 스페셜라이제이션 : 어테뉴에이션 세팅 만든다음에 거기서 설정하면 됌.

[6.200] - Crosshairs and HUDs

- 에임 만드는 법 배움.

[6.201] - Health Bars

- health bar 만드는 법: 블루프린트 위젯->progress_bar // c++에서 함수 만들어서 바인딩 하면 됌.

[6.202] - AimOffsets

- 블렌드 스페이스 비슷하게 이미 설정돼있고, 다른 에니메이션에 추가할 수 있는 애니메이션도 있음 : AO_Combat 
- 계단에 있는 적이 왜 그냥 player의 location으로 오게 했을 때 못 보는지 모르겠는데, 그냥 player그 자체를 보게 해야할듯.
rotation이 안먹나봄.


[6.203] - Animation State Machines

- 스테이트 머신 만들기.->에니메이션 그래프에서 만든다음에 더블클릭하면 스테이트머신만의 창으로 넘어감.

[6.204] - Complex State Machines

- 스테이트 머신 transition model에서 automatic rule based모시기 하면 그냥 하나 끝나고 바로 다른거로 넘어감.


more lectures
https://www.gamedev.tv/p/blender-character-creator-2/?product_id=1965927&coupon_code=JOINUS
https://www.gamedev.tv/p/unrealmultiplayer/?product_id=1500305&coupon_code=JOINUS
https://www.gamedev.tv/p/unreal-engine-5-blueprints?coupon_code=JOINUS

